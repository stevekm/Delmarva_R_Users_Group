% \documentclass{article}
\documentclass{report}
\usepackage[sc]{mathpazo} 
\usepackage[T1]{fontenc}
\usepackage{geometry} 
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
%\usepackage{array,booktabs}
\usepackage{cite} 
\usepackage[labelfont=bf]{caption} 
\usepackage[unicode=true,pdfusetitle,
bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
{hyperref}
% \usepackage{xcolor}%
% \usepackage[table]{xcolor}% http://ctan.org/pkg/xcolor
\usepackage{xcolor,colortbl}
\definecolor{darkblue}{rgb}{0.0,0.0,0.3}
% \definecolor{lightWhite}{HTML}{FEFEFE}
% \definecolor{lightestBlue}{HTML}{CBCBFE}
% \definecolor{blue0}{HTML}{E5E5FE}
% \definecolor{blue1}{HTML}{CBCBFE}
% \definecolor{blue2}{HTML}{B2B2FE}
% \definecolor{blue3}{HTML}{9898FE}
% \definecolor{blue4}{HTML}{7F7FFE}
% \definecolor{blue5}{HTML}{6666FE}
% \definecolor{blue6}{HTML}{4C4CFE}
% \definecolor{blue7}{HTML}{3333FE}
% \definecolor{blue8}{HTML}{1919FE}
% \definecolor{blue9}{HTML}{0000FE}
\hypersetup{colorlinks,breaklinks,
linkcolor=darkblue,urlcolor=darkblue,
anchorcolor=darkblue,citecolor=darkblue}
\usepackage{breakurl}
\usepackage{etoolbox} 
\usepackage{forloop}
\usepackage{tikz} 
\usepackage{subcaption} 
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{url}
\usepackage{fancyhdr} % http://linorg.usp.br/CTAN/macros/latex/contrib/fancyhdr/fancyhdr.pdf
% the default fancy header 
\pagestyle{fancy}
% these are the default settings for it
\fancyhead[LE,RO]{\slshape \rightmark}
\fancyhead[LO,RE]{\slshape \leftmark}
\fancyfoot[C]{\thepage}
%%%
% some other default header settings
% \fancyhf{}
% \rhead{\thepage}
% \lhead{Guides and tutorials}
% \rfoot{Page }
% \pagestyle{headings} % don't use this with the fancy headings
%%%%
% my custom header
% \fancyhead[LE,RO]{\slshape \rightmark}
% \fancyhead[LO,RE]{\thepage}
% \fancyfoot[C]{}
\newcommand{\hlslc}[1]{\textcolor[rgb]{0.67,0.67,0.67}{\it{#1}}} %add this to preamble after \usepackage[auth-sc]{authblk}
% \renewcommand\floatpagefraction{0.8} %% default value: 0.5
% \renewcommand\topfraction{0.8}       %% default value: 0.7
\begin{document}
<<setup, include=FALSE, cache=FALSE>>=
# this is equivalent to \SweaveOpts{...}
opts_chunk$set(fig.path='figure/latex-', fig.align='center', fig.show='hold')
options(replace.assign=TRUE,width=90)
require(highlight)
@ 


\title{Grade Analysis}

\author{Stephen Kelly
\,$^{1}$, 
\\
\\
\footnotesize $^{1}$Department of Biological Sciences, Salisbury University,\\
\footnotesize Henson Science Hall 230H, Salisbury, MD 21801, USA\\
\\
\footnotesize Email: \texttt{stephen.kelly.m@gmail.com}
} 
\date{May 6, 2015}

\maketitle
\tableofcontents
\begin{abstract}
A simulated data set was generated to examine student grades. Students were placed in one of ten class sections, and three exams were administered. Exam grade results will be analyzed to determine if differences exist between class sections, and to determine if exam performance can predict overall performance in the class. \\
Document updated on \date{\today}.
\end{abstract}
%%%%%%%%%%%%%%%%%%5
%
%
% This workflow analyzes student grades on three exams over the course of a semester. 
% Things to do: get the TeX tables from the PValue normality tests to output correctly
% finish statistical analysis; 
% run ANOVA or similar test, figure out which Sections are different in Exam 3
% Test for correlations between Exam 1, and 3 grades in students; can Exam 1 predict Exam 3?
% Consider adding data for the lab and lecture instructors..
%%%%%%%%%%%%%%%%
% \{Student Grade Reporting \& Analysis}
\chapter{Data Entry}
A simulated data set representing exam grades for 183 students in ten different sections of the same class were generated. Statistical analysis will be carried out using R. 
First, necessary R packages will be loaded.
<<require_packages,echo=TRUE>>=
# the following packages will be used
suppressPackageStartupMessages(require(xtable))
suppressPackageStartupMessages(require(beanplot))
suppressPackageStartupMessages(require(e1071))
suppressPackageStartupMessages(require(nortest))
suppressPackageStartupMessages(require(car))
suppressPackageStartupMessages(require(gplots))
@
Raw data is embedded in this document, and will be loaded into R. Grades from three exams each from seven sections of the same class were included in this analysis, with 183 total students. Students that did not take all three exams have been excluded from this analysis.
% Section LabInstructor n LecInstructor 
% 22 1 19 1
% 24 1 13 1
% 23 2 15 1
% 21 3 18 1 % 65
% 15 5 22 2
% 31 4 23 2 
% 32 2 20 2
% 33 5 19 2
% 34 4 23 2 % 107
% 16 1 11 1 % 11 % this is actually a different class
%
%  LecInstructor : Section : n
% 1: 21, 22, 23, 24, 16 : 76
% 2: 15, 31, 32, 33, 34 : 107
<<RawData,echo=TRUE>>=
grades<-data.frame(StudentID = 1:183, 
                   Section = as.factor(c(rep(22,19),
                                         rep(24,13), 
                                         rep(23,15),
                                         rep(21,18),
                                         rep(15,22),
                                         rep(31,23),
                                         rep(32,20),
                                         rep(33,19),
                                         rep(34,23), # first group ends here
                                         rep(16,11))), # second group  # 183 entries total
                   LabInstr = as.factor(c(rep(1,19),
                                         rep(1,13), 
                                         rep(2,15),
                                         rep(3,18),
                                         rep(5,22),
                                         rep(4,23),
                                         rep(4,20),
                                         rep(5,19),
                                         rep(4,23), # first group ends here
                                         rep(1,11))),
                   LecInstr= as.factor(c(rep(1,65),
                                         rep(2,107),
                                         rep(1,11))),
                   Exam1 = c(81, 59, 96, 63, 79, 
                             33, 63, 53, 73, 64, 39, 76, 87, 71, 56, 85, 77, 
                             95, 69, 88, 80, 67, 59, 76, 59, 24, 79, 63, 84, 
                             59, 63, 63, 67, 94, 96, 91, 93, 81, 77, 77, 91, 
                             67, 51, 70, 85, 27, 71, 78, 66, 85, 50, 64, 78, 
                             84, 95, 38, 65, 81, 50, 92, 81, 85, 76, 94, 77, 
                             81, 77, 21, 70, 80, 74, 86, 69, 72, 85, 69, 62, 
                             85, 92, 64, 67, 52, 90, 85, 73, 66, 68, 88, 97, 
                             64, 95, 89, 99, 86, 99, 39, 80, 94, 85, 79, 98, 
                             99, 91, 69, 98, 97, 89, 89, 98, 88, 83, 83, 92, 
                             48, 81, 78, 39, 69, 45, 49, 67, 77, 93, 67, 64, 
                             45, 84, 82, 85, 48, 89, 52, 69, 67, 88, 80, 38, 
                             54, 83, 37, 94, 85, 59, 65, 58, 66, 21, 55, 51, 
                             91, 70, 80, 87, 85, 91, 97, 98, 86, 93, 90, 89, 
                             80, 94, 94, 91, 86, 84, 84, 98, 74, 95, 96, # 172 entries as of here
                             84, 72, 86, 94, 62, 88, 89, 80, 88, 63, 52), # 183 entries here
                   Exam2 = c(84, 
                             88, 85, 72, 84, 48, 87, 92, 79, 69, 56, 89, 100, 
                             65, 79, 83, 87, 91, 95, 91, 43, 81, 91, 80, 75, 
                             63, 91, 87, 95, 49, 88, 85, 83, 96, 93, 94, 87, 
                             75, 79, 86, 91, 67, 65, 68, 78, 14, 79, 81, 61, 
                             95, 44, 85, 92, 90, 92, 21, 74, 73, 53, 63, 75, 
                             88, 92, 97, 69, 92, 76, 26, 79, 83, 71, 88, 95, 
                             49, 73, 62, 72, 95, 98, 81, 82, 79, 94, 96, 79, 
                             63, 79, 90, 95, 53, 70, 91, 98, 85, 99, 40, 68, 
                             55, 70, 58, 91, 59, 88, 49, 100, 94, 69, 78, 97, 
                             75, 99, 78, 84, 45, 92, 60, 47, 64, 67, 61, 91, 
                             85, 96, 72, 71, 58, 90, 89, 83, 53, 96, 75, 93, 
                             91, 96, 82, 50, 63, 89, 73, 94, 77, 64, 84, 96, 
                             92, 77, 31, 75, 86, 81, 93, 75, 92, 96, 88, 99, 
                             75, 88, 90, 58, 77, 99, 78, 93, 81, 61, 85, 91, 
                             90, 94, 94, #
                             94, 62, 91, 96, 82, 89, 88, 83, 81, 57, 69), 
                   Exam3 = c(91, 91, 91, 84, 87, 65, 79, 
                             95, 72, 79, 52, 87, 88, 76, 87, 81, 87, 92, 93, 
                             91, 84, 97, 89, 77, 84, 67, 88, 91, 100, 52, 81, 
                             87, 80, 99, 96, 98, 92, 88, 91, 72, 90, 90, 54, 
                             64, 86, 21, 78, 75, 85, 86, 72, 77, 96, 90, 98, 
                             31, 70, 92, 78, 73, 79, 90, 86, 88, 93, 93, 88, 
                             56, 91, 96, 88, 94, 83, 73, 90, 90, 91, 88, 98, 
                             92, 92, 77, 92, 98, 94, 85, 92, 94, 89, 91, 87, 
                             74, 95, 75, 90, 40, 54, 93, 86, 88, 74, 74, 94, 
                             80, 99, 83, 78, 84, 98, 76, 93, 77, 89, 84, 97, 
                             58, 76, 78, 58, 76, 94, 85, 93, 83, 78, 67, 94, 
                             81, 90, 76, 100, 92, 92, 99, 97, 94, 81, 62, 95, 
                             96, 96, 90, 70, 100, 93, 89, 86, 32, 79, 100, 
                             89, 73, 98, 100, 95, 88, 98, 62, 89, 77, 72, 86, 
                             100, 63, 91, 92, 98, 87, 97, 96, 94, 78, #
                             89, 66, 88, 75, 64, 85, 77, 84, 92, 63, 61))

# lets add a new column to this data set, showing each student's Average grade 
grades$Average<-round(x = apply(X = grades[5:7],MARGIN = 1,FUN = mean),digits = 1)
@
The first 30 entries in the data set will be displayed in Table~\ref{tab:head30}

<<xtable,results='asis',echo=TRUE>>=
print(xtable(x = head(grades,30),label="tab:head30",
             caption = "Example output for the first 30 student grades"),
      include.rownames=FALSE
      ,size = "small")
@
\clearpage
For some types of analysis, it is better to use data that has been entered in a factor-level format. This will keep each individual grade entry associated with its corresponding student, section, and exam. Many R functions prefer to work with data in this format. For this purpose, we will exclude the Average exam grade data.
<<RawData_Factor>>=
# ID Section Exam Grade
gradesFctr<-data.frame(StudentID=as.factor(rep(grades$StudentID,3)),
                       LecInstr=as.factor(rep(grades$LecInstr,3)),
                       Section=as.factor(rep(grades$Section,3)),
                       LabInstr=as.factor(rep(grades$LabInstr,3)),
                       Exam=as.factor(rep(1:3,each=183)),
                       Grade=c(grades$Exam1,
                               grades$Exam2,
                               grades$Exam3))
@
A sample of this new factored data format will be displayed in Table~\ref{tab:factorData}.

<<xtableFactors,results='asis'>>=
print(xtable(head(gradesFctr,30),label="tab:factorData",
             caption="First 30 entries for data entered in a factor level format"))
@
Summary statistics will be calculated to describe each Exam and class Section. This data will be displayed in Table~\ref{tab:SummaryStats}
<<summaryStats,echo=TRUE,results='asis'>>=
# make a summary data set 
# start with mean for each Exam grade in each section
gradesAgg<-aggregate(Grade~Section+Exam,data=gradesFctr,FUN = mean) 
colnames(gradesAgg)[3]<-"MeanGrade"

# add the Standard Deviation of the exam grades
gradesAgg$StDev<-aggregate(Grade~Section+Exam,data=gradesFctr,FUN = sd)$Grade

# add the number of students who took the exam
gradesAgg$n<-aggregate(StudentID~Section+Exam,data=gradesFctr,
                       FUN = function(y) length(unique(y)))$StudentID
#$Grade

gradesAgg<-gradesAgg[,c(2,1,5,3,4)]
print(xtable(gradesAgg,label="tab:SummaryStats",
             caption = "Summary Statistics for each section on each exam."))
@
We can calculate more summary statistics, based on Lab Instructor. Results displayed in Table~\ref{tab:SummaryStats2}
<<summaryStats2,echo=TRUE,results='asis'>>=
# make a summary data set 
# start with mean for each Exam grade in each section
gradesAgg2<-aggregate(Grade~LabInstr+Exam,data=gradesFctr,FUN = mean) 
colnames(gradesAgg2)[3]<-"MeanGrade"

# add the Standard Deviation of the exam grades
gradesAgg2$StDev<-aggregate(Grade~LabInstr+Exam,data=gradesFctr,FUN = sd)$Grade

# add the number of students who took the exam
gradesAgg2$n<-aggregate(StudentID~LabInstr+Exam,data=gradesFctr,
                       FUN = function(y) length(unique(y)))$StudentID
#$Grade

gradesAgg2<-gradesAgg2[,c(2,1,5,3,4)]
print(xtable(gradesAgg2,label="tab:SummaryStats2",
             caption = "Summary Statistics for each lab instructor on each exam. Grades from all sections taught by each lab instructor are grouped together."))
rm(gradesAgg,gradesAgg2)
@
\clearpage
\chapter{Grade Analysis}
\section{Grades by Section}
Histograms will be generated in order to display grade distributions for each class section on each exam. First, a series of colors will be generated for use within the plots.
<<HistogramColors>>=
# these colors will be used for Histogram bars
col<-c(rep("grey",5),"red","yellow","green","blue")
@
A \texttt{for} loop will be used to iteratively plot each exam for each section. These plots will be saved as .pdf files, which will be loaded back into the document with \LaTeX  code.
<<Hist_GradeDistr>>=
for(i in unique(gradesFctr$Exam)){ # iterate by Exam
  for(q in unique(gradesFctr[gradesFctr$Exam==i,]$Section)){ # iterate by Section
    tmpGrades<-gradesFctr[gradesFctr$Section==q & gradesFctr$Exam==i,]$Grade
    pdf(file=paste0("./figure/Exam_",i,"_Section_",q,"_gradeDistHist.pdf"),width=7,height=7)
    hist(x = tmpGrades,
         main=paste0("Exam ",i," Section ",q),
         freq=TRUE,
         col=col,
         xlab="Percentage",
         breaks=seq(from=10,to=100,by=10),
         axes=FALSE,
         labels=TRUE,
         cex.axis=0.5)
    axis(side=1, 
         at=seq(from=10,
                to=100,by=10),
         labels=seq(from=10,to=100,by=10))
    axis(side=2, 
         at=seq(from=0,
                to=max(tmpGrades,by=5)),
         labels=seq(from=0,
                    to=max(tmpGrades,by=5)))
    legend("topleft",
           c(paste("Mean = ",
                   round(mean(tmpGrades))),
             paste("Median = ",median(tmpGrades)),
             paste("Std. Dev = ",signif(sd(tmpGrades),digits=3)),
             paste("n = ",length(tmpGrades))),
           bty='n')
    dev.off()
  }
}
@
\clearpage
%       \forloop[1]{LoopCounter}{1}{\value{LoopCounter} < 4+1}}{ % number of figures per page (4) +1 % Latex for loop
\foreach \i in {1,2,3} {
%
% \section{Exam \i-  Grade Distributions} % couldn't get this to display correctly
\begin{figure}%
%
\foreach \q in {15,16,31,32} {
%
\begin{subfigure}[H]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/Exam_\i _Section_\q _gradeDistHist}
\end{subfigure}
}%
%
\caption{}
% \label{fig:1}
\end{figure}
%
\newpage
\begin{figure}%
\foreach \q in {33,34,21,22} {
\begin{subfigure}[H]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/Exam_\i _Section_\q _gradeDistHist}
\end{subfigure}
}
\caption{}
% \label{fig:2}
\end{figure}
%
\begin{figure}
\foreach \q in {23,24} {
\begin{subfigure}[H]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/Exam_\i _Section_\q _gradeDistHist}
\end{subfigure}
}
\caption{}
% \label{fig:3}
\end{figure}
\clearpage
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Grades by Lab Instructor}
Histograms will be generated in order to display grade distributions for each lab instructor on each exam.
A \texttt{for} loop will be used to iteratively plot each exam for each section. These plots will be saved as .pdf files, which will be loaded back into the document with \LaTeX  code.
<<Hist_GradeDistr2>>=
for(i in unique(gradesFctr$Exam)){ # iterate by Exam
  for(q in unique(gradesFctr[gradesFctr$Exam==i,]$LabInstr)){ # iterate by Lab Instructor
    tmpGrades<-gradesFctr[gradesFctr$LabInstr==q & gradesFctr$Exam==i,]$Grade
    pdf(file=paste0("./figure/Exam_",i,"_LabIntr_",q,"_gradeDistHist.pdf"),width=7,height=7)
    hist(x = tmpGrades,
         main=paste0("Exam ",i," Lab Instructor ",q),
         freq=TRUE,
         col=col,
         xlab="Percentage",
         breaks=seq(from=10,to=100,by=10),
         axes=FALSE,
         labels=TRUE,
         cex.axis=0.5)
    axis(side=1, 
         at=seq(from=10,
                to=100,by=10),
         labels=seq(from=10,to=100,by=10))
    axis(side=2, 
         at=seq(from=0,
                to=max(tmpGrades,by=5)),
         labels=seq(from=0,
                    to=max(tmpGrades,by=5)))
    legend("topleft",
           c(paste("Mean = ",
                   round(mean(tmpGrades))),
             paste("Median = ",median(tmpGrades)),
             paste("Std. Dev = ",signif(sd(tmpGrades),digits=3)),
             paste("n = ",length(tmpGrades))),
           bty='n')
    dev.off()
  }
}
@
\clearpage
%       \forloop[1]{LoopCounter}{1}{\value{LoopCounter} < 4+1}}{ % number of figures per page (4) +1 % Latex for loop
\foreach \i in {1,2,3} {
%
% \section{Exam \i-  Grade Distributions} % couldn't get this to display correctly
\begin{figure}%
%
\foreach \q in {1,2,3,4} {
%
\begin{subfigure}[H]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/Exam_\i _LabIntr_\q _gradeDistHist}
\end{subfigure}
}%
%
\caption{}
% \label{fig:1}
\end{figure}
%
\newpage
\begin{figure}%
\centering
\foreach \q in {5} {
\includegraphics[width=0.5\textwidth]{./figure/Exam_\i _LabIntr_\q _gradeDistHist}
}
\caption{}
% \label{fig:2}
\end{figure}
%
\clearpage
}
%
\chapter{Hypothesis Testing}
\section{Transformation}
Because our data is in the form of percentages, from 0 to 100, we should transform the grades based on the arcsine or \texttt{asin} function.
<<DataTransform>>=
gradesFctrTrns<-gradesFctr
gradesFctrTrns$Grade<-asin(gradesFctrTrns$Grade/100)
@
\section{Exam 3 by Section}
\begin{itemize}
\item Researcher's Hypothesis: There will be a difference between Exam 3 grades between class Sections
\item H$_{0}$: There is no difference between grades
\item H$_{A}$: There is a difference between grades
\item $\alpha$ = 0.05
\end{itemize}
In order to determine if we can use parametric statistical testing, we will first conduct Normality tests on the Exam 3 data divided by Section.
\subsection{Normality Test by Section}
We will test subsets of the exam grade data set for normality. The following standard set of Normality tests will be used:
<<Stats1,echo=TRUE>>=
# Normality tests
# Here are the tests we will conduct
Tests<-c('Shapiro-Wilk',
         'Anderson-Darling',
         'Shapiro-Francia',
         'Kolmogorov-Smirnov', #Lilliefors
         'Cramer-von Mises',
         'Chi-Square') # Pearson
@

First, we will test the Exam 3 grades for each class Section for normality of grade distribution. It is important to remember that for small sample sizes, normality tests may not accurately reject the null hypothesis. Due to the nature of the data and small sample sizes, it is hypothesized that the data will not be normally distributed (p<0.05)
\begin{itemize}
\item Normality Testing Hypothesis: The data is not normally distributed
\item H$_{0}$: The data appears to be normally distributed
\item H$_{A}$: The data does not appear to be normally distributed
\item $\alpha$ = 0.05
\end{itemize}
A \texttt{for} loop will be used to generate Q-Q plots to visually check the distribution of the data compared to that of an expected normally distributed data set. Results from the Normality tests will be embedded within each plot, with an asterisk besides tests that return significant p values less than 0.05 (i.e. data does not appear to be normally distributed).
<<Exam3QQ>>=
for(i in unique(gradesFctrTrns[gradesFctrTrns$Exam==3,]$Section)){
  
  # store the data subset in a new R object
  tmp<-gradesFctrTrns[gradesFctrTrns$Section==i & gradesFctrTrns$Exam==3,]
  # store a vector of just the Grades
  tmpGrades<-tmp$Grade
  # store a copy of the Normality Tests
  tmpTests<-Tests
  # conduct the Normality tests, save into a list
  Results<-c(assign('sw1',shapiro.test(tmpGrades))[2],
             assign('ad1',ad.test(tmpGrades))[2],
             assign('sf1',sf.test(tmpGrades))[2],
             assign('lt1',lillie.test(tmpGrades))[2],
             assign('cv1',cvm.test(tmpGrades))[2],
             assign('px1',pearson.test(tmpGrades))[2])
  # evalute the Test results, put an asterisk next to significant tests
  for(q in 1:length(Results)){
    if(Results[q]<=0.05) tmpTests[q]<-paste0("* ",tmpTests[q]) else tmpTests[q]<-tmpTests[q]
  }
  
  PVALUES<-data.frame(P.Value=unlist(Results),row.names=tmpTests)
  
  pdf(file=paste0("./figure/Section_",i,"_Exam3_QQ.pdf"),width=5,height=5)
  
  qqnorm(tmpGrades,col='blue',
         main = paste0("Q-Q Plot for Section ",i," Exam 3"))
  qqline(tmpGrades,col='red',lty='dashed',lwd=3)
  
  legend("bottomright",bty = "n",cex = 0.8,
         legend=c(paste("n = ",length(tmpGrades)),
                  paste(tmpTests[1],signif(PVALUES[1,],3)),
                  paste(tmpTests[2],signif(PVALUES[2,],3)),
                  paste(tmpTests[3],signif(PVALUES[3,],3)),
                  paste(tmpTests[4],signif(PVALUES[4,],3)),
                  paste(tmpTests[5],signif(PVALUES[5,],3)),
                  paste(tmpTests[6],signif(PVALUES[6,],3))))
  dev.off()
}
@
\begin{figure}%
%
\foreach \q in {15,16,31,32} {%,33,34,21,22,23,24} {%
%
\begin{subfigure}[b]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/Section_\q _Exam3_QQ}
\end{subfigure}
}%
%
\caption{}
% \label{fig:1}
\end{figure}
%
\begin{figure}%
\foreach \q in {33,34,21,22} {
\begin{subfigure}[b]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/Section_\q _Exam3_QQ}
\end{subfigure}
}
\caption{}
% \label{fig:2}
\end{figure}
%
\begin{figure}
\foreach \q in {23,24} {
\begin{subfigure}[b]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/Section_\q _Exam3_QQ}
\end{subfigure}
}
\caption{}
% \label{fig:3}
\end{figure}
\clearpage
Due to small sample size, it is important to remember that Normality tests may not accurately reject the null hypothesis and give significant p-values (<0.05) suggesting that data is not normal when it actually is. 
Normality test results show that all sections returned p-values greater than 0.05 except for Section 15. This shows that, after arcsine transformation, all data was normally distributed. 
\subsection{Equality of Variance}
Next, we will check our data sets for equality of variances. The variances between factor levels in our data set should be equal if we wish to use parametric statistics. We will exclude Section 15 from the data set, since it did not have a normal distribution and will not be appropriate to include in parametric statistical tests. 
\begin{itemize}
\item Equality of Variance Hypothesis: The variances among data groupings are not equal
\item H$_{0}$: The variances among data are equal
\item H$_{A}$: The variances among data are not equal
\item $\alpha$ = 0.05
\end{itemize}
<<Variances1,eval=TRUE,echo=TRUE>>=
# make a fresh copy of the subsetted transformed data
tmp<-gradesFctrTrns[gradesFctrTrns$Section!=15 & gradesFctrTrns$Exam==3,]
# output the Levene test results
print(leveneTest(Grade~Section,data=tmp))
@
The Levene's Test returned a p-value much higher than 0.05, indicating that the variances in the transformed grade data are equal between sections.
\subsection{ANOVA}
For parametric analysis, we need 3 or more categories of data, with equal variances and normal distribution. After excluding Section 15 from our Exam 3 data, all of these conditions have been satisfied. We can now perform an analysis of variance (ANOVA) on the data to determine if there are significant differences between Exam 3 grades between Sections.
\begin{itemize}
\item ANOVA Hypothesis: There are significant differences between Grades for Exam 3 between Sections.
\item H$_{0}$: There are no differences in exam results between sections
\item H$_{A}$: There are differences in exam results between sections
\item $\alpha$ = 0.05
\end{itemize}
<<ANOVA_Section>>=
# remember that R function go like this; dependent ~ independent
# use our transformed data, without Section 15
tmp<-gradesFctrTrns[gradesFctrTrns$Section!=15 & gradesFctrTrns$Exam==3,]
# perform the ANOVA, save it into an object
SectionANOVA<-aov(Grade~Section,data=tmp)
summary(SectionANOVA)
@
The ANOVA returned a p-value much higher than 0.05. We are unable to reject the null hypothesis and must conclude that there are not significant differences in scores on Exam 3 between different Sections of the course. We can visualize the ANVOA results. 
<<plotMeansSection>>=
plotmeans(Grade~Section,data=tmp,main="Exam 3 Means & Conf. Intervals")
@
% # <<TukeySections>>=
% # TukeyHSD(SectionANOVA)
% # @
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Exam 3 by Lab Instructor}
It is possible that Exam 3 scores for some Lab Instructors may be different, based on teaching and testing methods. We can test for this with statistical analysis. We will use our arcsine transformed data for these tests.
\begin{itemize}
\item Researcher's Hypothesis: There is a difference in Exam 3 grades between Lab Instructors
\item H$_{0}$: There is no difference between grades
\item H$_{A}$: There is a difference between grades
\item $\alpha$ = 0.05
\end{itemize}
To determine if parametric statistical tests can be used, we will test the data for distribution normality.
\subsection{Normality by Lab Instructor}
\begin{itemize}
\item Normality Testing Hypothesis: The data is not normally distributed
\item H$_{0}$: The data appears to be normally distributed
\item H$_{A}$: The data does not appear to be normally distributed
\item $\alpha$ = 0.05
\end{itemize}
In order to determine if we can use parametric statistical testing, we will first conduct Normality tests on the Exam 3 data divided by Lab Instructor.
<<Exam3QQLabIntr>>=
for(i in unique(gradesFctrTrns[gradesFctrTrns$Exam==3,]$LabInstr)){
  
  # store the data subset in a new R object
  tmp<-gradesFctrTrns[gradesFctrTrns$LabInstr==i & gradesFctrTrns$Exam==3,]
  # store a vector of just the Grades
  tmpGrades<-tmp$Grade
  # store a copy of the Normality Tests
  tmpTests<-Tests
  # conduct the Normality tests, save into a list
  Results<-c(assign('sw1',shapiro.test(tmpGrades))[2],
             assign('ad1',ad.test(tmpGrades))[2],
             assign('sf1',sf.test(tmpGrades))[2],
             assign('lt1',lillie.test(tmpGrades))[2],
             assign('cv1',cvm.test(tmpGrades))[2],
             assign('px1',pearson.test(tmpGrades))[2])
  # evalute the Test results, put an asterisk next to significant tests
  for(q in 1:length(Results)){
    if(Results[q]<=0.05) tmpTests[q]<-paste0("* ",tmpTests[q]) else tmpTests[q]<-tmpTests[q]
  }
  
  PVALUES<-data.frame(P.Value=unlist(Results),row.names=tmpTests)
  
  pdf(file=paste0("./figure/LabInstr_",i,"_Exam3_QQ.pdf"),width=5,height=5)
  
  qqnorm(tmpGrades,col='blue',
         main = paste0("Q-Q Plot for LabInstr ",i," Exam 3"))
  qqline(tmpGrades,col='red',lty='dashed',lwd=3)
  
  legend("bottomright",bty = "n",cex = 0.8,
         legend=c(paste("n = ",length(tmpGrades)),
                  paste(tmpTests[1],signif(PVALUES[1,],3)),
                  paste(tmpTests[2],signif(PVALUES[2,],3)),
                  paste(tmpTests[3],signif(PVALUES[3,],3)),
                  paste(tmpTests[4],signif(PVALUES[4,],3)),
                  paste(tmpTests[5],signif(PVALUES[5,],3)),
                  paste(tmpTests[6],signif(PVALUES[6,],3))))
  dev.off()
}
@
\begin{figure}%
%
\foreach \q in {1,2,3,4} {%,33,34,21,22,23,24} {%
%
\begin{subfigure}[b]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/LabInstr_\q _Exam3_QQ}
\end{subfigure}
}%
%
\caption{}
% \label{fig:1}
\end{figure}
%
\begin{figure}%
\centering
\foreach \q in {5} {
\includegraphics[width=0.5\textwidth]{./figure/LabInstr_\q _Exam3_QQ}
}
\caption{}
% \label{fig:2}
\end{figure}
\clearpage
Results of normality testing show that Exam 3 grades for Lab Instructors 1, 2, 3, and 4 are normally distributed. Grades for Instructor 5 were not normally distributed, so these will be excluded from further testing.
\subsection{Equality of Variance}
Next, we will check our data sets for equality of variances. We will exclude Exam 3 scores for Lab Instructor 5, since it did not have a normal distribution and will not be appropriate to include in parametric statistical tests. 
\begin{itemize}
\item Equality of Variance Hypothesis: The variances among data groupings are not equal
\item H$_{0}$: The variances among data are equal
\item H$_{A}$: The variances among data are not equal
\item $\alpha$ = 0.05
\end{itemize}
<<Variances3,eval=TRUE,echo=TRUE>>=
# make a fresh copy of the subsetted transformed data
tmp<-gradesFctrTrns[gradesFctrTrns$LabInstr!=5 & gradesFctrTrns$Exam==3,]
# output the Levene test results
print(leveneTest(Grade~Section,data=tmp))
@
The Levene's Test returned a p-value much higher than 0.05, indicating that the variances in the transformed grade data are equal between sections.
\subsection{ANOVA}
For parametric analysis, we need 3 or more categories of data, with equal variances and normal distribution. After excluding Lab Instructor 5 from our transformed Exam 3 data, all of these conditions have been satisfied. We can now perform an analysis of variance (ANOVA) on the data to determine if there are significant differences in Exam 3 grades between Lab Instructors.
\begin{itemize}
\item ANOVA Hypothesis: There are significant differences between Grades in Exam 3 between Lab Instructors.
\item H$_{0}$: There are no differences in exam results between sections
\item H$_{A}$: There are differences in exam results between sections
\item $\alpha$ = 0.05
\end{itemize}
<<ANOVA_Labintr>>=
# use our transformed data, without Section 15
tmp<-gradesFctrTrns[gradesFctrTrns$LabInstr!=5 & gradesFctrTrns$Exam==3,]
# perform the ANOVA, save it into an object
LabIntrANOVA<-aov(Grade~LabInstr,data=tmp)
summary(LabIntrANOVA)
@
The ANOVA returned a p-value higher than 0.05. We are unable to reject the null hypothesis and must conclude that there are not significant differences in scores on Exam 3 between different Lab Instructors. We can visualize the ANVOA results. 
<<plotMeansLabInstr>>=
plotmeans(Grade~LabInstr,data=tmp,main="Exam 3 Means & Conf. Intervals")
@
% if the ANOVA had returned significant results, we could use Tukey test...
% # <<TukeySections>>=
% # TukeyHSD(SectionANOVA)
% # @
%%%%%%%%%%
\section{Exam Predictors}
It would be helpful if we could use some exam grades to predict others. Specifically, we would like to test to see if Exam 1 can predict Exam 3, or if Exam 1 can predict the average score across all three exams. 
% this is where we would put a hypothesis, if it applies
% \begin{itemize}
% \item ANOVA Hypothesis: There are significant differences between Grades in Exam 3 between Lab Instructors.
% \item H$_{0}$: There are no differences in exam results between sections
% \item H$_{A}$: There are differences in exam results between sections
% \item $\alpha$ = 0.05
% \end{itemize}
\subsection{Normality Test}
First, we will test for normality of the arcsine transformed grade distributions for Exam 1, Exam 3, and the average Exam scores.
\begin{itemize}
\item Normality Testing Hypothesis: The data is not normally distributed
\item H$_{0}$: The data appears to be normally distributed
\item H$_{A}$: The data does not appear to be normally distributed
\item $\alpha$ = 0.05
\end{itemize}
Also, we need to exclude Section 16 from the data set for reasons that are not listed here.
<<ExamAllQQ>>=
for(i in c(1,3)){ # Exams 1, 3
  # store the data subset in a new R object
  tmp<-gradesFctrTrns[gradesFctrTrns$Exam==i & gradesFctrTrns$Section!=16,]
  # store a vector of just the Grades
  tmpGrades<-tmp$Grade
  # store a copy of the Normality Tests
  tmpTests<-Tests
  # conduct the Normality tests, save into a list
  Results<-c(assign('sw1',shapiro.test(tmpGrades))[2],
             assign('ad1',ad.test(tmpGrades))[2],
             assign('sf1',sf.test(tmpGrades))[2],
             assign('lt1',lillie.test(tmpGrades))[2],
             assign('cv1',cvm.test(tmpGrades))[2],
             assign('px1',pearson.test(tmpGrades))[2])
  # evalute the Test results, put an asterisk next to significant tests
  for(q in 1:length(Results)){
    if(Results[q]<=0.05) tmpTests[q]<-paste0("* ",tmpTests[q]) else tmpTests[q]<-tmpTests[q]
  }
  
  PVALUES<-data.frame(P.Value=unlist(Results),row.names=tmpTests)
  
  pdf(file=paste0("./figure/AllExam_",i,"_QQ.pdf"),width=5,height=5)
  
  qqnorm(tmpGrades,col='blue',
         main = paste0("Q-Q Plot for Exam ",i))
  qqline(tmpGrades,col='red',lty='dashed',lwd=3)
  
  legend("bottomright",bty = "n",cex = 0.8,
         legend=c(paste("n = ",length(tmpGrades)),
                  paste(tmpTests[1],signif(PVALUES[1,],3)),
                  paste(tmpTests[2],signif(PVALUES[2,],3)),
                  paste(tmpTests[3],signif(PVALUES[3,],3)),
                  paste(tmpTests[4],signif(PVALUES[4,],3)),
                  paste(tmpTests[5],signif(PVALUES[5,],3)),
                  paste(tmpTests[6],signif(PVALUES[6,],3))))
  dev.off()
}
@
Next, test the normality of the average grades.
<<NormalityAvgExam>>=
# Average Exam Grades
# get the averages from the original data set 
# need to arcsine transform them

gradesTrns<-grades[grades$Section!=16,]
gradesTrns$Average<-asin(gradesTrns$Average/100)

# store a vector of just the average Grades
tmpGrades<-gradesTrns$Average
# store a copy of the Normality Tests
tmpTests<-Tests
# conduct the Normality tests, save into a list
Results<-c(assign('sw1',shapiro.test(tmpGrades))[2],
           assign('ad1',ad.test(tmpGrades))[2],
           assign('sf1',sf.test(tmpGrades))[2],
           assign('lt1',lillie.test(tmpGrades))[2],
           assign('cv1',cvm.test(tmpGrades))[2],
           assign('px1',pearson.test(tmpGrades))[2])
# evalute the Test results, put an asterisk next to significant tests
for(q in 1:length(Results)){
  if(Results[q]<=0.05) tmpTests[q]<-paste0("* ",tmpTests[q]) else tmpTests[q]<-tmpTests[q]
}

PVALUES<-data.frame(P.Value=unlist(Results),row.names=tmpTests)

pdf(file="./figure/AvgGrades_QQ.pdf",width=5,height=5)

qqnorm(tmpGrades,col='blue',
       main = paste0("Q-Q Plot for Average Grades"))
qqline(tmpGrades,col='red',lty='dashed',lwd=3)

legend("bottomright",bty = "n",cex = 0.8,
       legend=c(paste("n = ",length(tmpGrades)),
                paste(tmpTests[1],signif(PVALUES[1,],3)),
                paste(tmpTests[2],signif(PVALUES[2,],3)),
                paste(tmpTests[3],signif(PVALUES[3,],3)),
                paste(tmpTests[4],signif(PVALUES[4,],3)),
                paste(tmpTests[5],signif(PVALUES[5,],3)),
                paste(tmpTests[6],signif(PVALUES[6,],3))))
dev.off()
@
\begin{figure}%
\begin{subfigure}[b]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/AllExam_1_QQ}
\end{subfigure}
\begin{subfigure}[b]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/AllExam_3_QQ}
\end{subfigure}
\begin{subfigure}[b]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/AvgGrades_QQ}
\end{subfigure}%
\caption{}
% \label{fig:1}
\end{figure}
\clearpage
Grades for Exam 3 and the Average Exam grades appear to lack a normal distribution. 
\subsection{Equality of Variance}
Next, we will check our data sets for equality of variances. We will not exclude any data sets since we only have 3.
\begin{itemize}
\item Equality of Variance Hypothesis: The variances among data groupings are not equal
\item H$_{0}$: The variances among data are equal
\item H$_{A}$: The variances among data are not equal
\item $\alpha$ = 0.05
\end{itemize}
<<Variances67,eval=TRUE,echo=TRUE>>=
# get the Average Exam grades into the Factor formatted data
gradesAvgFctrTrns<-data.frame(StudentID=as.factor(rep(grades$StudentID,4)),
                              LecInstr=as.factor(rep(grades$LecInstr,4)),
                              Section=as.factor(rep(grades$Section,4)),
                              LabInstr=as.factor(rep(grades$LabInstr,4)),
                              Exam=c(as.factor(rep(1:3,each=183)),rep("AVG",183)),
                              Grade=c(asin(grades$Exam1/100),
                                      asin(grades$Exam2/100),
                                      asin(grades$Exam3/100),
                                      asin(grades$Average/100)))

# drop Section 16 
tmpGradesTrns<-gradesAvgFctrTrns[gradesAvgFctrTrns$Section!=16,]
# output the Levene test results
print(leveneTest(Grade~Exam,data=tmpGradesTrns))
@
The Levene's Test returned a p-value much smaller than 0.05, indicating that the variances in the transformed grade data are not equal between Exams 1, 2, 3, and the average Exam grade.
\subsection{Linear Regression}
In order to test the ability of Exam 1 to predict scores for Exam 3 or the Average Exam grades, we will use a simple linear regression.
<<LinearModeldata1>>=
# Linear Model for Exam 1 & Exam 3
LinearModelGrades1<-lm(Grade~Exam,
                       data=tmpGradesTrns[tmpGradesTrns$Exam!=2 & tmpGradesTrns$Exam!="AVG",])
summary(LinearModelGrades1)

# Linear Model for Exam 1 and average Exam grade
LinearModelGrades2<-lm(Grade~Exam,
                       data=tmpGradesTrns[tmpGradesTrns$Exam!=2 & tmpGradesTrns$Exam!=3,])
summary(LinearModelGrades2)
@
% Plots can be generated to visualize the linear models
% <<LinearModelPlots12>>=
% plot(LinearModelGrades1)
% @
%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<LinearModel,eval=FALSE,echo=FALSE>>=
# Make a simple linear model for exam 1 and exam 3
colnames(gradesAdj)
Grades1_4<-subset(gradesAdj,subset=(Exam==1|Exam==4))
LM<-lm(Grade~Exam,data=Grades1_4)#gradesAdj)#,subset=Exam %in% c('1'))
summary(LM)
#gradesAdj[gradesAdj$Exam==1,]
#wilcox.test(Sepal.Width~Species,data=iris,subset=Species %in% c('setosa','versicolor'))
# http://therostrumblog.wordpress.com/2014/01/29/basic-data-frame-manipulations-in-r/
@
%%%%%%%%%%%%%%
\chapter{Conclusions}
\begin{itemize}
\item Exam grade data was arcsine transformed for analysis
\item No significant difference was found in grades for Exam 3 between different course Sections
\item No significant difference was found in grades for Exam 3 between different Lab Instructors
\item A linear regression does not appear to be able to use Exam 1 results to predict Exam 3 or average Exam grade results. Perhaps another test would be more successful.
\end{itemize}
\chapter{Other Visualization Methods}
This section shows other ways to visualize our data.
\section{Beanplots}
Beanplots will be generated to show grade distribution for all exam grades within a section. One advantage of beanplots is that they easily display data distribution density while showing all individual data points in each data set. The ends of the bean represent the data distribution, while the bean shape represents the density of data points. Each data point is represented by a dash mark inside the bean, with the thick black bar on each bean representing the mean. The dashed line along the plot represents the mean between all data sets. One advantage of beanplots is that they easily display trends in the data that may be masked by box plots, such as bi modal distribution. They are also much easier to interpret than box plots. 
<<beanplot1,eval=TRUE,include=TRUE,echo=TRUE>>=
# display the grades in side-by-side bean plots
for(i in unique(gradesFctr$Section)){
  pdf(file=paste0("./figure/Section_",i,"_beanplot.pdf"),width=5,height=5)
  beanplot(Grade~Exam,
           data=gradesFctr[gradesFctr$Section==i,],
           main=paste0("Section ",i," Exam Grade Distribution"),
           names = c("Exam 1","Exam 2","Exam 3"),
           col=list("yellow","lightgreen","lightblue"),
           ylab="Grade %")
  dev.off()
}
@
%
\begin{figure}%
%
\foreach \q in {15,16,31,32} {%,33,34,21,22,23,24} {%
%
\begin{subfigure}[b]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/Section_\q _beanplot}
\end{subfigure}
}%
%
\caption{}
% \label{fig:1}
\end{figure}
%
\begin{figure}%
\foreach \q in {33,34,21,22} {
\begin{subfigure}[b]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/Section_\q _beanplot}
\end{subfigure}
}
\caption{}
% \label{fig:2}
\end{figure}
%
\begin{figure}
\foreach \q in {23,24} {
\begin{subfigure}[b]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/Section_\q _beanplot}
\end{subfigure}
}
\caption{}
% \label{fig:3}
\end{figure}
\clearpage
\section{Scatterplots}
Scatterplots will be generated to display Exam grade data by section. A scatter plot is a standard data visualization method that is easy to interpret. The bars on the graph above each distribution represent the standard deviation of the data set, while the red star represents the mean of each data set. These plots are a little harder to interpret than beanplots, since the data points tend to overlap heavily in dense areas of the graph. 
<<ScatterPlots1,echo=TRUE>>=
for(i in unique(gradesFctr$Section)){
  tmp<-gradesFctr[gradesFctr$Section==i,]
  pdf(file=paste0("./figure/Section_",i,"_GradesScatter.pdf"),width=5,height=5)
  plot(Grade~as.numeric(Exam),
       data=tmp,
       ylim=c(0,100),
       main=paste0("Section ",i," Exam Grades"),
       xlab="Exam",ylab="Grade",
       type="p",
       pch=1,
       col="blue")
  arrows(x0=1,x1=1,
         y0=mean(tmp[tmp$Exam==1,]$Grade)-sd(tmp[tmp$Exam==1,]$Grade),
         y1=mean(tmp[tmp$Exam==1,]$Grade)+sd(tmp[tmp$Exam==1,]$Grade),
         length=0.1,angle=90,code=3)
  arrows(x0=2,x1=2,y0=mean(tmp[tmp$Exam==2,]$Grade)-sd(tmp[tmp$Exam==2,]$Grade),
         y1=mean(tmp[tmp$Exam==2,]$Grade)+sd(tmp[tmp$Exam==2,]$Grade),
         length=0.1,angle=90,code=3)
  arrows(x0=3,x1=3,y0=mean(tmp[tmp$Exam==3,]$Grade)-sd(tmp[tmp$Exam==3,]$Grade),
         y1=mean(tmp[tmp$Exam==3,]$Grade)+sd(tmp[tmp$Exam==3,]$Grade),
         length=0.1,angle=90,code=3)
  points(y=c(mean(tmp[tmp$Exam==1,]$Grade),
             mean(tmp[tmp$Exam==2,]$Grade),
             mean(tmp[tmp$Exam==3,]$Grade)),
         x=c(1,2,3),pch=8,cex=1.5,col="red")
  dev.off()
}
@
%
\begin{figure}%
%
\foreach \q in {15,16,31,32} {%,33,34,21,22,23,24} {%
%
\begin{subfigure}[b]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/Section_\q _GradesScatter}
\end{subfigure}
}%
%
\caption{}
% \label{fig:1}
\end{figure}
%
\begin{figure}%
\foreach \q in {33,34,21,22} {
\begin{subfigure}[b]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/Section_\q _GradesScatter}
\end{subfigure}
}
\caption{}
% \label{fig:2}
\end{figure}
%
\begin{figure}
\foreach \q in {23,24} {
\begin{subfigure}[b]{0.5\textwidth}
\includegraphics[width=\textwidth]{./figure/Section_\q _GradesScatter}
\end{subfigure}
}
\caption{}
% \label{fig:3}
\end{figure}
\clearpage
\section{Normality Test Tables}
A \texttt{for} loop will be used to conduct Normality tests on the Exam 3 data from each Section. The results will be printed in xtables for display in our \LaTeX document. It is important to note that xtable parameters truncate decimal values at two digits. This section is retained for code reference purposes; the Q-Q plots generated previously give a more accurate description of test results.
<<Exam3Normality>>=
for(i in unique(gradesFctr[gradesFctr$Exam==3,]$Section)){
  tmp<-gradesFctr[gradesFctr$Section==i & gradesFctr$Exam==3,]
  tmpGrades<-tmp$Grade
  Results<-c(assign('sw1',shapiro.test(tmpGrades))[2],
             assign('ad1',ad.test(tmpGrades))[2],
             assign('sf1',sf.test(tmpGrades))[2],
             assign('lt1',lillie.test(tmpGrades))[2],
             assign('cv1',cvm.test(tmpGrades))[2],
             assign('px1',pearson.test(tmpGrades))[2])
  PVALUES<-data.frame(P.Value=unlist(Results),row.names=Tests)
  print(xtable(PVALUES,caption = paste0("Normality tests for Section ",i," Exam 3")),signif.stars = TRUE,
        file = paste0("./table/Section_",i,"_Exam_3_Normality.tex"))
}
@
\foreach \q in {15,16,31,32} {
\input{./table/Section_\q _Exam_3_Normality.tex}
}
\foreach \q in {33,34,21,22} {
\input{./table/Section_\q _Exam_3_Normality.tex}
}
\foreach \q in {23,24} {
\input{./table/Section_\q _Exam_3_Normality.tex}
}
\clearpage
\end{document}